[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{name = 'colour_1', ref_table = G.C, ref_value = 'RED'},"
position = "at"
payload = "{name = 'colour_1', ref_table = G.C, ref_value = 'BANAN1'},"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_joker'])"
position = "at"
payload = "SC = Card(G.ROOM.T.w/2 - SC_scale*G.CARD_W/2, 10. + G.ROOM.T.h/2 - SC_scale*G.CARD_H/2, SC_scale*G.CARD_W, SC_scale*G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['j_gros_michel'])"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{name = 'colour_1', ref_table = G.C, ref_value = 'BLUE'},"
position = "at"
payload = "{name = 'colour_1', ref_table = G.C, ref_value = 'BANAN1'},"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{name = 'colour_2', ref_table = G.C, ref_value = 'BLUE'},"
position = "at"
payload = "{name = 'colour_2', ref_table = G.C, ref_value = 'BANAN2'},"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "ease_background_colour{new_colour = G.C.BLUE, special_colour = G.C.RED, tertiary_colour = darken(G.C.BLACK, 0.4), contrast = 3}"
position = "at"
payload = "ease_background_colour{new_colour = G.C.BANAN2, special_colour = G.C.BANAN1, tertiary_colour = darken(G.C.BLACK, 0.4), contrast = 3}"
match_indent = true

[[patches]]
[patches.pattern]
target = "globals.lua"
pattern = "VERSION = VERSION..'-FULL'"
position = "before"
payload = "VERSION = '1.1.0b'"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''return {n=G.UIT.ROOT, config = {align = "cm", padding = 0.03, colour = G.C.UI.TRANSPARENT_DARK}, nodes={'''
position = "before"
payload = '''if G.GAME.modifiers.no_discards then
    contents.round[1].nodes = {contents.round[1].nodes[1]}
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = '''self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS.j_joker, {bypass_discovery_center = true})'''
position = "at"
payload = '''self.children.card = Card(self.T.x, self.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, args.center or G.P_CENTERS.j_gros_michel, {bypass_discovery_center = true})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''local _de = nil'''
position = "at"
payload = '''local _de = self.GAME.starting_params.banana and {enhancement = 'm_stone'}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.T, config={ref_table = G.GAME, ref_value='win_ante', scale = scale, colour = G.C.WHITE, shadow = true}}'''
position = "at"
payload = '''{n=G.UIT.T, config={text = "9?", scale = scale, colour = G.C.WHITE, shadow = true}}'''
match_indent = true

# ===Glop===

# Glop flame handler
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''for k, v in pairs(G.ARGS.flame_handler) do'''
position = "before"
payload = '''
G.C.UI_GLOPLICK = G.C.UI_GLOPLICK or {1, 1, 1, 1}
for i=1, 3 do
    G.C.UI_GLOPLICK[i] = math.min(math.max(((G.C.UI_GLOP[i]*0.5+G.C.YELLOW[i]*0.5) + 0.1)^2, 0.1), 1)
end
G.ARGS.flame_handler.glop = {
    id = 'flame_glop',
    arg_tab = 'glop_flames',
    colour = G.C.UI_GLOP,
    accent = G.C.UI_GLOPLICK
}
'''
match_indent = true

# Add glop to hand_text_area
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''check_and_set_high_score('most_money', G.GAME.dollars)'''
position = "before"
payload = '''G.hand_text_area.glop = self.HUD:get_UIE_by_ID('hand_glop')'''
match_indent = true

# huh
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''end
if vals.mult and G.GAME.current_round.current_hand.mult ~= vals.mult then'''
position = "before"
payload = '''
if not G.TAROT_INTERRUPT then G.hand_text_area.chips:juice_up() end
'''
match_indent = true


# update_hand_text on glop
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if vals.handname and G.GAME.current_round.current_hand.handname ~= vals.handname then'''
position = "before"
payload = '''
if vals.glop and G.GAME.current_round.current_hand.glop ~= vals.glop then
    local delta = (type(vals.glop) == 'number' and type(G.GAME.current_round.current_hand.glop) == 'number')and (vals.glop - G.GAME.current_round.current_hand.glop) or 0
    if delta < 0 then delta = ''..delta; col = G.C.RED
    elseif delta > 0 then delta = '+'..delta
    else delta = ''..delta
    end
    if type(vals.glop) == 'string' then delta = vals.glop end
    G.GAME.current_round.current_hand.glop = vals.glop
    G.hand_text_area.glop:update(0)
    if vals.StatusText then 
        attention_text({
            text =delta,
            scale = 0.8, 
            hold = 1,
            cover = G.hand_text_area.glop.parent,
            cover_colour = mix_colours(G.C.GLOP, col, 0.1),
            emboss = 0.05,
            align = 'cm',
            cover_align = 'cl'
        })
    end
    if not G.TAROT_INTERRUPT then G.hand_text_area.glop:juice_up() end
end'''
match_indent = true

# add glop to current_hand table
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''mult_text = '0','''
position = "after"
payload = '''glop = 0,
glop_text = '0','''
match_indent = true

# add glop (real)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''hand_chips = mod_chips(G.GAME.hands[text].chips)'''
position = "after"
payload = '''glop = G.GAME.hands[text].glop'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''hand_chips = mod_chips(Cryptid.ascend(G.GAME.hands[text].chips))'''
position = "after"
payload = '''glop = Cryptid.ascend(G.GAME.hands[text].glop)'''
match_indent = true

# glop UI (very real)
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if modded then update_hand_text({sound = 'chips2', modded = modded}, {chips = hand_chips, mult = mult}) end'''
position = "at"
payload = '''if modded then update_hand_text({sound = 'chips2', modded = modded}, {chips = hand_chips, mult = mult, glop = glop}) end'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''update_hand_text({delay = 0}, {chips = hand_chips, mult = mult})'''
position = "at"
payload = '''update_hand_text({delay = 0}, {chips = hand_chips, mult = mult, glop = glop+0.01})'''
match_indent = true

# glop functionality (the realest)
[[patches]]
[patches.regex]
target = "functions/state_events.lua"
pattern = '''hand_chips\*mult'''
position = "at"
payload = '''hand_chips*mult*glop'''

# more update_hand_text patches for glop
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, level = '', handname = ''})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, glop = 0, level = '', handname = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, level = '', handname = ''})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, glop = 0, level = '', handname = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, glop = 0, handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, glop = 0, handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize('k_all_hands'),chips = '...', mult = '...', level=''})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize('k_all_hands'),chips = '...', mult = '...', glop = '...', level=''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, level=G.GAME.hands[self.ability.consumeable.hand_type].level})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(self.ability.consumeable.hand_type, 'poker_hands'),chips = G.GAME.hands[self.ability.consumeable.hand_type].chips, mult = G.GAME.hands[self.ability.consumeable.hand_type].mult, glop = G.GAME.hands[self.ability.consumeable.hand_type].glop, level=G.GAME.hands[self.ability.consumeable.hand_type].level})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(text, 'poker_hands'),chips = G.GAME.hands[text].chips, mult = G.GAME.hands[text].mult, level=G.GAME.hands[text].level})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(text, 'poker_hands'),chips = G.GAME.hands[text].chips, mult = G.GAME.hands[text].mult, glop = G.GAME.hands[text].glop, level=G.GAME.hands[text].level})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?'})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname='????', level='?', mult = '?', chips = '?', glop = '?'})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips, glop = G.GAME.hands[text].glop})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = Cryptid.ascend(G.GAME.hands[text].mult), chips = Cryptid.ascend(G.GAME.hands[text].chips)})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = Cryptid.ascend(G.GAME.hands[text].mult), chips = Cryptid.ascend(G.GAME.hands[text].chips), glop = Cryptid.ascend(G.GAME.hands[text].glop)})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''mult = G.GAME.hands[self.ability.orbital_hand].mult,'''
position = "after"
payload = '''glop = G.GAME.hands[self.ability.orbital_hand].glop,'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, glop = 0, handname = '', level = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, level = '', handname = ''})'''
position = "at"
payload = '''update_hand_text({immediate = true, nopulse = true, delay = 0}, {mult = 0, chips = 0, glop = 0, level = '', handname = ''})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips, glop = G.GAME.hands[text].glop})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = Cryptid.ascend(G.GAME.hands[text].mult), chips = Cryptid.ascend(G.GAME.hands[text].chips)})'''
position = "at"
payload = '''delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = Cryptid.ascend(G.GAME.hands[text].mult), chips = Cryptid.ascend(G.GAME.hands[text].chips), glop = Cryptid.ascend(G.GAME.hands[text].glop)})'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = G.GAME.blind.cry_cap_score and G.GAME.blind:cry_cap_score(math.floor(hand_chips*mult)) or math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
position = "at"
payload = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, glop = 0, chip_total = G.GAME.blind.cry_cap_score and G.GAME.blind:cry_cap_score(math.floor(hand_chips*mult)) or math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
position = "at"
payload = '''func = (function()  update_hand_text({delay = 0, immediate = true}, {mult = 0, chips = 0, glop = 0, chip_total = math.floor(hand_chips*mult), level = '', handname = ''});play_sound('button', 0.9, 0.6);return true end)'''
match_indent = true

# glop flames check
[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult'''
position = "at"
payload = '''G.ARGS.score_intensity.earned_score = is_number(G.GAME.current_round.current_hand.glop) and G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult*G.GAME.current_round.current_hand.glop or 0'''
match_indent = true

# Make chip and mult stay at the current scale
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, 0.9, 1000)'''
position = "at"
payload = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, 0.69, 1000)'''
match_indent = true

# Make chip and mult stay at the current scale
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, 0.9, 1000)'''
position = "at"
payload = '''e.config.object.scale = scale_number(G.GAME.current_round.current_hand.chips, 0.69, 1000)'''
match_indent = true

# glop planet loc
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.hands[cfg.hand_type].level,localize(cfg.hand_type, 'poker_hands'), G.GAME.hands[cfg.hand_type].l_mult, G.GAME.hands[cfg.hand_type].l_chips,'''
position = "at"
payload = '''G.GAME.hands[cfg.hand_type].level,localize(cfg.hand_type, 'poker_hands'), G.GAME.hands[cfg.hand_type].l_mult, G.GAME.hands[cfg.hand_type].l_chips, G.GAME.hands[cfg.hand_type].l_glop,'''
match_indent = true

# glop planet level stuff
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)'''
position = "after"
payload = '''G.GAME.hands[hand].glop = math.max(G.GAME.hands[hand].glop + G.GAME.hands[hand].l_glop*amount, 1)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].chips + G.GAME.hands[hand].l_chips*amount, 1)'''
position = "after"
payload = '''G.GAME.hands[hand].glop = math.max(G.GAME.hands[hand].glop + G.GAME.hands[hand].l_glop*amount, 1)'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=G.GAME.hands[hand].level})'''
position = "before"
payload = '''update_hand_text({delay = 0}, {glop = Cryptid and Cryptid.ascend and Cryptid.ascend(G.GAME.hands[hand].glop) or G.GAME.hands[hand].glop, StatusText = true})
G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
    play_sound('tarot1')
    if card then card:juice_up(0.8, 0.5) end
    G.TAROT_INTERRUPT_PULSE = nil
    return true end }))'''
match_indent = true

# Glop in win screen
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''create_UIBox_round_scores_row('new_collection', G.C.WHITE),'''
position = "at"
payload = '''create_UIBox_round_scores_row('best_glop', G.C.GLOP),'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''check_and_set_high_score('hand', hand_chips*mult)'''
position = "at"
payload = '''if not glop then glop = 0 end
check_and_set_high_score('hand', hand_chips*mult)
check_and_set_high_score('best_glop', glop)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''play_area_status_text("Not Allowed!")--localize('k_not_allowed_ex'), true)'''
position = "at"
payload = '''play_area_status_text(localize('k_not_allowed_ex'), true)'''
match_indent = true

# Tag calculations pre-scoring
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''mult, hand_chips = mod_mult(mult), mod_chips(hand_chips)'''
position = "after"
payload = '''check_and_set_high_score('best_glop', glop)
for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'scoring'})
end'''
match_indent = true

# Copying steamodded to add perma_glop

# set_ability: set defaults for permanent bonuses
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "perma_bonus = self.ability and self.ability.perma_bonus or 0,"
position = "after"
payload = '''
perma_glop = self.ability and self.ability.perma_glop or 0,
'''
match_indent = true
overwrite = false

# generate_UIBox_ability_table(): prime specific_vars for playing cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,"
position = "at"
payload = '''
bonus_glop = self.ability.perma_glop ~= 0 and (self.ability.perma_glop) or nil,'''
match_indent = true
overwrite = false

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = 'function Card:get_edition()'
position = "before"
match_indent = true
payload = '''
function Card:get_glop()
    if self.debuff then return 0 end
    local ret = (self.ability.glop or 0) + (self.ability.perma_glop or 0)
    -- TARGET: get_glop
    return ret
end
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '-- TARGET: main scoring on played cards'
position = "after"
match_indent = true
payload = '''
local glop = card:get_glop()
if glop > 0 then
    ret.playing_card.glop = glop
end
'''

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''{n=G.UIT.O, config={draw_layer = 1, object = DynaText({scale = args.scale, string = args.text, maxw = args.maxw, colours = {args.colour},float = true, shadow = true, silent = not args.noisy, args.scale, pop_in = 0, pop_in_rate = 6, rotate = args.rotate or nil})}},'''
position = "at"
match_indent = true
payload = '''{n=G.UIT.O, config={draw_layer = 1, object = DynaText({scale = args.scale, string = args.text, maxw = args.maxw, colours = {args.colour},float = true, shadow = true, silent = not args.noisy, args.scale, pop_in = 0, pop_in_rate = 6, rotate = args.rotate or nil, text_rot = args.text_rot or 0})}},'''

# Splash text
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.SPLASH_LOGO.dissolve = 1'''
position = "after"
match_indent = true
payload = '''
G.E_MANAGER:add_event(Event({
    func = function()
if G.SPLASH_TEXT then
    G.SPLASH_TEXT:remove()
    G.SPLASH_TEXT = nil
end
local st = pseudorandom_element(G.localization.misc.splash, pseudoseed(math.random(G.CONTROLLER.cursor_hover.T.x*0.33411983 + G.CONTROLLER.cursor_hover.T.y*0.874146 + 0.412311010*G.CONTROLLER.cursor_hover.time)))
G.SPLASH_TEXT = UIBox{
    definition = {
        n = G.UIT.ROOT,
        config = { align = "cm", colour = G.C.CLEAR },
        nodes = {
            {
                n = G.UIT.O,
                config = {
                    object = DynaText({
                        string = st,
                        colours = { G.C.BANAN1 },
                        shadow = true,
                        float = true,
                        rotate = true,
                        text_rot = -0.3,
                        scale = math.min(1.2, 40/#st),
                        pop_in_rate = 1,
                        pop_in = 0.3,
                    }),
                },
            },
        },
    },
    config = {
        major = G.ROOM_ATTACH,
        type = 'cm',
        bond = 'Strong',
        offset = {x=3.5,y=0.5}
    }
}return true
                    end,
                }))
'''


# Add credits tab
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''end,
            },
        },
        snap_to_nav = true}),'''
position = "at"
payload = '''end,
            },
            {
                label = "Banana",
                tab_definition_function = banana_credits
            }
        },
        snap_to_nav = true}),'''
match_indent = true